import React, { useState } from 'react';

import { Button, Col, Form, Modal, Radio, RadioChangeEvent, Row, Space, Typography } from "antd";
import { useNavigate } from "react-router-dom";
import { MEETING_ID_LENGTH } from "../../constants";
import { useCreateRoom } from '../../hooks/meeting-setup/CreateMeetingHook';
import InputWithCopy from "../inputs/InputWithCopy";

enum MeetingIDType {
  Custom = 1,
  AutoGenerated = 2,
}

const CreateMeetingPage: React.FC<ModalProps> = ({ visible, onClose }) => {
  const [meetingIDType, setMeetingIDType] = useState<MeetingIDType>(
    MeetingIDType.Custom
  );
  const [meetingID, setMeetingID] = useState<string>("");
  const [form] = Form.useForm();
  const createRoom = useCreateRoom();
  const navigate = useNavigate();

  const handleRadioChange = (e: RadioChangeEvent) => {
    const selectedType = e.target.value as MeetingIDType;
    setMeetingIDType(selectedType);

    // Reset state based on the type selected
    if (selectedType === MeetingIDType.AutoGenerated) {
      const generatedID = generateMeetingID();
      setMeetingID(generatedID);
      form.resetFields(["Meeting ID"]);
    } else {
      setMeetingID("");
      form.resetFields(["Meeting ID"]);
    }
  };

  const generateMeetingID = (): string => {
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    return Array.from({ length: MEETING_ID_LENGTH }, () =>
      characters.charAt(Math.floor(Math.random() * characters.length))
    ).join("");
  };

    return (
        <Modal
            title="Start an instant meeting"
            open={visible}
            confirmLoading={false}
            onCancel={onClose}
            footer={[
                <Button key="back" onClick={onClose}>
                    Cancel
                </Button>,
                <Button
                    type="primary"
                    key="start"
                    onClick={async () => {
                        const resp = await createRoom(meetingID!);
                        if (resp) {
                            console.log('Room created successfully');
                            navigate(`/setup/${meetingID}`); 
                        } else {
                            // TODO: Need to handle room creation error from resposne
                            console.log('Error creating room'); 
                        }
                    }}
                >
                    Start
                </Button>,
            ]}
        >
            <Form name="trigger" layout="vertical" autoComplete="off" autoCapitalize="on">
                <Row>
                    <Space direction="vertical" size={"large"}>
                        {/* Header */}
                        <Col>
                            <Typography.Text>
                                You can start a meeting either by generating a new meeting ID or by creating your own.
                            </Typography.Text>
                        </Col>
                        {/* Body */}
                        <Col>
                            <Radio.Group
                                defaultValue={MeetingIDType.Custom}
                                value={meetingIDType}
                                onChange={handleRadioChange}
                            >
                                <Space direction="vertical">
                                    <Radio value={MeetingIDType.Custom}>Create your own meeting ID</Radio>
                                    <Radio value={MeetingIDType.AutoGenerated}>Generate a new meeting ID</Radio>
                                </Space>
                            </Radio.Group>
                        </Col>
                    </Space>
                </Row>
                {/* Input Field */}
                <Form.Item
                  hasFeedback
                  label="Meeting ID"
                  name="Meeting ID"
                  className="mt-6"
                  validateFirst
                  rules={
                    meetingIDType === MeetingIDType.Custom
                      ? [
                          {
                            type: "string",
                            min: MEETING_ID_LENGTH,
                            max: MEETING_ID_LENGTH,
                            message: `Meeting ID must be a sequence of ${MEETING_ID_LENGTH} characters.`,
                          },
                          {
                            required: true,
                            message: "Please enter a meeting ID.",
                          },
                        ]
                      : []
                  }
                >
                  <InputWithCopy
                    placeholder={
                      meetingIDType === MeetingIDType.Custom
                        ? "Enter your meeting ID"
                        : meetingID || "Generated meeting ID will appear here"
                    }
                    value={meetingID}
                    disabled={meetingIDType === MeetingIDType.AutoGenerated}
                    onChange={(e) => {
                      if (meetingIDType === MeetingIDType.Custom) {
                        setMeetingID(e.target.value);
                      }
                    }}
                  />
                </Form.Item>
            </Form>
        </Modal>
    );
};

interface ModalProps {
  visible: boolean;
  onClose: () => void;
}

export default CreateMeetingPage;
